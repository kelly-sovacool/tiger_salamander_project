""" Pipeline for calling haplotypes on Illumina sequences and combining with haplotypes from 454 data. """

import Bio.SeqIO
import collections
import datetime
import os
import plotly
import pprint
import time
import shutil

configfile: "../config.yaml"
reference_file = config["reference"]
reference_sequences = {seq_record.id: seq_record for seq_record in Bio.SeqIO.parse(reference_file, 'fasta')}

loci=set(reference_sequences.keys())
loci_454 = {fn.strip(".fna") for fn in os.listdir(config["454_haplotypes_dir"])}
loci_not_in_454 = loci - loci_454
pair1, pair2 = "R1", "R2"
hap_numbers = ["1", "2"]

ruleorder: combine_454_and_illumina > include_loci_not_in_454
include: "rules/haplotype_illumina_data.smk"
include: "rules/align_454_haplotypes.smk"

rule all:
    input:
        "reports/matrix.tsv",
        "reports/loci_histogram.html"

rule combine_454_and_illumina:
    input:
        haps_454="intermediates_454/haps_aligned_filtered/{locus}.fna",
        haps_illumina="intermediates_illumina/haplotypes/{locus}.fna"
    output:
        protected("haplotypes/{locus}.fna")
    shell:
        "cat {input} > {output}"

rule include_loci_not_in_454:
    input:
        "intermediates_illumina/haplotypes/{locus}.fna"
    output:
        protected("haplotypes/{locus}.fna")
    params:
        locus="{locus}"
    run:
        if params.locus in loci_not_in_454:
            shutil.copy(input[0], output[0])

rule build_matrix:
    input:
        expand("haplotypes/{locus}.fna", locus=loci)
    output:
        matrix='reports/matrix.tsv',
        histogram='reports/loci_histogram.html'
    benchmark:
        "benchmarks/build_matrix.txt"
    run:
        individuals_to_seq_runs = collections.defaultdict(set)
        for working_dir, subdirs, files in os.walk(os.path.expanduser(config['illumina_fastq_dir'])):
            for filename in files:
                if filename[0] != '.' and filename[:4] != "Icon" :
                    indiv_id = filename.split('_')[0]
                    base, subdir = os.path.split(working_dir)
                    individuals_to_seq_runs[indiv_id].add(subdir)
        for filename in os.listdir(config["454_haplotypes_dir"]):
            with open(os.path.join(config["454_haplotypes_dir"], filename), 'r') as infile:
                for seq_record in Bio.SeqIO.parse(infile, 'fasta'):
                    individuals_to_seq_runs[seq_record.id.split('_')[0]].add("Tigrinum_454_2013")
        matrix = "individual_id\tsequencing_runs"
        input = sorted(input)
        individuals_to_loci = collections.defaultdict(set)
        for locus_filename in input:
            locus_id = locus_filename.split('/')[-1].split('.fna')[0]
            matrix += "\t" + locus_id
            with open(locus_filename, 'r') as file:
                for line in file:
                    if line[0] == '>':
                        indiv_id = line[1:].split('_')[0]
                        individuals_to_loci[indiv_id].add(locus_id)
        for indiv_id in sorted(individuals_to_loci):
            newline = '\n' + indiv_id + '\t' + ', '.join(sorted(individuals_to_seq_runs[indiv_id]))
            #print(individuals_to_seq_runs[indiv_id], '\tnewline:',newline)
            matrix += newline
            for locus_id in loci:
                matrix += '\t1' if locus_id in individuals_to_loci[indiv_id] else '\t0'
        with open(output.matrix, 'w') as file:
            file.write(matrix)
        data = [plotly.graph_objs.Histogram(x=[len(individuals_to_loci[indiv_id]) for indiv_id in individuals_to_loci])]
        layout = plotly.graph_objs.Layout(title=('Individuals in Loci'), xaxis=dict(title='Number of Loci'), yaxis=dict(title='Number of Individuals'))
        figure = plotly.graph_objs.Figure(data=data,layout=layout)
        plotly.offline.plot(figure, filename=output.histogram, auto_open=True)
