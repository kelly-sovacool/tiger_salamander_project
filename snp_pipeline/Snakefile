""" Pipeline for calling SNPs, subsampling, and preparing scripts for running Structure on the DLX cluster. """

import Bio.SeqIO
import collections
import datetime
import os
import plotly
import time

# TODO: rule "report" for snps per locus histogram

configfile: "config.yaml"
haplotypes_dir = config['haplotypes_dir']
ruleorder: snp_subsample_skip_filter > snp_subsample

rule all:
    input:
        expand("snp_sites/{locus}.fna", locus=loci),
        "reports/snp_histogram.html"

rule snp_sites:
    input:
        "{haplotypes_dir}/{{locus}}.fna".format(haplotypes_dir=haplotypes_dir)
    output:
        "snp_sites/{locus}.fna"
    log:
        "logs/snp_sites/{locus}.log"
    benchmark:
        "benchmarks/snp_sites/{locus}.txt"
    shell:
        "snp-sites -o {output} {input} 2> {log}"

rule snp_subsample:
    input:
        expand("snp_sites/{locus}.fna", locus=loci)
    output:
        expand("snp_subsamples/{subsample_base}{num}.{{ext}}", subsample_base=config["snp_subsample"]["output_filename_base"], num=range(config["snp_subsample"]["num_subsamples"])),
        expand("snp_sites_filtered/{locus}.fna", locus=loci),
        "snp_subsample/all-snps-all-loci.{ext}"
    params:
        fn_base = config["snp_subsample"]["output_filename_base"],
        num_subsamples = config["snp_subsample"]["num_subsamples"],
        output_format = config["snp_subsample"]["output_format"]
    shell:
        "scripts/snp_subsample.py snp_sites/ snp_subsamples/{params.fn_base} "
        "--all-snps-all-loci --output-format {params.output_format} --num_subsamples {params.num_subsamples} "
        "--output-filtered-fasta-dir snp_sites_filtered/"

rule snp_subsample_skip_filter:
    input:
        expand("snp_sites_filtered/{locus}.fna", locus=loci)
    output:
        expand("snp_subsamples/{subsample_base}{num}.{{ext}}", subsample_base=config["snp_subsample"]["output_filename_base"], num=range(config["snp_subsample"]["num_subsamples"])),
        "snp_subsample/all-snps-all-loci.{ext}"
    shell:
        "scripts/snp_subsample.py snp_sites/ snp_subsamples/{params.fn_base} "
        "--all-snps-all-loci --output-format {params.output_format} --num_subsamples {params.num_subsamples} "
        "--skip-filter"


rule write_strx_scripts:
    input:
        "snp_subsamples/{subsample_filename}.{ext}"
    output:
        expand("structure/strx_{{subsample_filename}}_{k}.sh", k=range(config["structure"]["k_min"], config["structure"]["k_max"] + 1))
    params:
        strx_path = config["structure"]["path"],
        num_runs = config["structure"]["num_runs"],
        k_min = config["structure"]["k_min"],
        k_max = config["structure"]["k_max"],
        email = config["structure"]["email"]
    run:
        N = 0  # individuals
        L = 0  # loci
        with open(input[0], 'r') as file:
            is_first = True
            for line in file:
                N += 1
                if is_first:
                    is_first = False
                    L = len(line.split()) - 1
        N = N / 2
        for k in range(params.k_min, params.k_max + 1):
            script = "#!/bin/bash\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user={email}\nSBATCH_NODELIST: $SBATCH_NODELIST\n\n".format(email=params.email)
            for run in range(1, params.num_runs + 1):
                script += "{strx_path} -i {subsample} -K {k} -L {L} -N {N} -o {{subsample_filename}}_k{k}_run{run}.out &\nsleep 10\n\n".format(strx_path=params.strx_path, subsample=input[0], k=k, L=L, N=N, run=run)
            script += 'wait'
            with open('structure/strx_{{subsample}}_k{k}.sh'.format(k=k), 'w') as script_file:
                script_file.write(script)

rule histogram:
    input:
        snps_raw=expand("snp_sites/{locus}.fna", locus=loci),
        snps_filtered=expand("snp_sites_filtered/{locus}.fna", locus=loci)
    output:
        "reports/snp_histogram.html"
    log:
        "logs/histogram/snps_per_locus.log"
    run:
        plotly.offline.plot(plotly.graph_objs.Figure(data=[plotly.graph_objs.Histogram(x=[len(next(Bio.SeqIO.parse(filename, 'fasta')).seq) for filename in input.snps_filtered], name="snps filtered", autobinx=True),
                                                           plotly.graph_objs.Histogram(x=[len(next(Bio.SeqIO.parse(filename, 'fasta')).seq) for filename in input.snps_raw], name="snps unfiltered", autobinx=True)],
                                                     layout=plotly.graph_objs.Layout(barmode='stack'), title=('SNP sites per locus'), xaxis=dict(title='Number of SNPs'), yaxis=dict(title='Number of loci'))),
                                                     filename=output.hist, auto_open=True)
        avg_snps_per_locus = sum(len(next(Bio.SeqIO.parse(filename, 'fasta')).seq) for filename in input.snps_filtered) / len(input.snps_filtered)
        with open(log[0], 'w') as logfile:
            logfile.write(avg_snps_per_locus)
